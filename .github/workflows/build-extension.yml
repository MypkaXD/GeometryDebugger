name: Build extension

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Add nuget to PATH
        uses: nuget/setup-nuget@v1
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2
      - name: Update version
        run: |
          (Get-Content -Path GeometryDebugger\source.extension.vsixmanifest) |
            ForEach-Object {$_ -Replace '1.0.0', '1.0.${{ github.run_number }}'} |
              Set-Content -Path GeometryDebugger\source.extension.vsixmanifest
          (Get-Content -Path GeometryDebugger\Properties\AssemblyInfo.cs) |
            ForEach-Object {$_ -Replace '1.0.0', '1.0.${{ github.run_number }}'} |
              Set-Content -Path GeometryDebugger\Properties\AssemblyInfo.cs
          (Get-Content -Path GeometryDebugger\GeometryDebuggerToolWindow.cs) |
            ForEach-Object {$_ -Replace '1.0.0', '1.0.${{ github.run_number }}'} |
              Set-Content -Path GeometryDebugger\GeometryDebuggerToolWindow.cs
      - name: Restore
        run: nuget restore
      - name: Build
        run: msbuild /p:configuration=Release /p:DeployExtension=false /p:ZipPackageCompressionLevel=normal
      - uses: actions/upload-artifact@v4
        with:
          name: GeometryDebugger.vsix
          path: GeometryDebugger\bin\Release\GeometryDebugger.vsix
      - name : Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          repository: MypkaXD/GeometryDebugger
          # note you'll typically need to create a personal access token
          # with permissions to create releases in the other repo
          token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
